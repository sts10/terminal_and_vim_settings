# Configuring Our Prompt
# ======================

   function parse_git_dirty {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working directory clean" ]] && echo "*"
  }

  # This function is called in your prompt to output your active git branch.
  # function parse_git_branch {
  #   git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
  # }

  function parse_git_branch {
      git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/ (\1$(parse_git_dirty))/"
  }
 

  # This function builds your prompt. It is called below
  function prompt {
    # Define some local colors
    local         RED="\[\033[0;31m\]" # This syntax is some weird bash color thing I never
    local   LIGHT_RED="\[\033[1;31m\]" # really understood
    local        BLUE="/e[0;34m"
    local        CHAR="✚"
    local   CHAR_COLOR="33"
    # ❆ ♥ ♥ ☆ - Keeping some cool ASCII Characters for reference
    # http://www.hongkiat.com/blog/cool-ascii-symbols-get-them-now/

    # colors 
    # http://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux

    # Here is where we actually export the PS1 Variable which stores the text for your prompt
    export PS1="\[\e]2;\u@\h\a[\[\e[30;1m\]\t\[\e[0m\]]$RED\$(parse_git_branch) \[\e[0;34m\]\W\[\e[0m\]\n\[\e[0;31m\]$CHAR \[\e[0m\]"
      PS2='> '
      PS4='+ '
    }

  # Finally call the function and our prompt is all pretty
  prompt

  # For more prompt coolness, check out Halloween Bash:
  # http://xta.github.io/HalloweenBash/

  # If you break your prompt, just delete the last thing you did.
  # And that's why it's good to keep your dotfiles in git too.

if [ -e /usr/share/terminfo/x/xterm-256color ]; then
  export TERM='xterm-256color'
else
  export TERM='xterm-color'
fi

# Environment Variables
# =====================
  # Library Paths
  # These variables tell your shell where they can find certain
  # required libraries so other programs can reliably call the variable name
  # instead of a hardcoded path.

    # NODE_PATH
    # Node Path from Homebrew I believe
    export NODE_PATH="/usr/local/lib/node_modules:$NODE_PATH"

    # PYTHON_SHARE
    # Python Shared Path from Homebrew I believe
    #   export PYTHON_SHARE='/usr/local/share/python'

    # Those NODE & Python Paths won't break anything even if you
    # don't have NODE or Python installed. Eventually you will and
    # then you don't have to update your bash_profile

  # Configurations

    # GIT_MERGE_AUTO_EDIT
    # This variable configures git to not require a message when you merge.
    export GIT_MERGE_AUTOEDIT='no'

    # Editors
    # Tells your shell that when a program requires various editors, use MacVim
    export VISUAL="mvim"
    export SVN_EDITOR="mvim"
    export GIT_EDITOR="mvim"
    export EDITOR="mvim"

  # Paths

    # The USR_PATHS variable will just store all relevant /usr paths for easier usage
    # Each path is seperate via a : and we always use absolute paths.

    # A bit about the /usr directory
    # The /usr directory is a convention from linux that creates a common place to put
    # files and executables that the entire system needs access too. It tries to be user
    # independent, so whichever user is logged in should have permissions to the /usr directory.
    # We call that /usr/local. Within /usr/local, there is a bin directory for actually
    # storing the binaries (programs) that our system would want.
    # Also, Homebrew adopts this convetion so things installed via Homebrew
    # get symlinked into /usr/local
    export USR_PATHS="/usr/local:/usr/local/bin:/usr/local/sbin:/usr/bin"

    # Hint: You can interpolate a variable into a string by using the $VARIABLE notation as below.

    # We build our final PATH by combining the variables defined above
    # along with any previous values in the PATH variable.

    # Our PATH variable is special and very important. Whenever we type a command into our shell,
    # it will try to find that command within a directory that is defined in our PATH.
    # Read http://blog.seldomatt.com/blog/2012/10/08/bash-and-the-one-true-path/ for more on that.
    export PATH="$USR_PATHS:$PYTHON_SHARE:$PATH"

    # If you go into your shell and type: $PATH you will see the output of your current path.
    # For example, mine is:
    # /Users/avi/.rvm/gems/ruby-1.9.3-p392/bin:/Users/avi/.rvm/gems/ruby-1.9.3-p392@global/bin:/Users/avi/.rvm/rubies/ruby-1.9.3-p392/bin:/Users/avi/.rvm/bin:/usr/local:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/local/mysql/bin:/usr/local/share/python:/bin:/usr/sbin:/sbin:

# Helpful Functions
# =====================

# A function to CD into the desktop from anywhere
# so you just type desktop.
# HINT: It uses the built in USER variable to know your OS X username

# USE: desktop
#      desktop subfolder
function desktop {
  cd /Users/$USER/Desktop/$@
}

function code {
  cd /Users/$USER/Documents/code/$@
}

function ramblings {
  cd /Users/$USER/Documents/Journals/ramblings/$@
}

function push_ss {
  aws s3 sync ~/Documents/code/buzzfeed/screenshotter s3://datadev.buzzfeed.com/tools/screenshotter --acl public-read --exclude ".git/*"
}

function pull_ss {
  aws s3 sync s3://datadev.buzzfeed.com/tools/screenshotter ~/Documents/code/buzzfeed/screenshotter
}

function ink { 
bash /Users/$USER/Documents/code/ink/ink.sh "$1" 
}

function recall_safe {
  cwd=$(pwd) #save pwd as cwd
  cd /Users/samschlinkert/Documents/code/recall_non_gem
  ruby bin/runner.rb
  cd $cwd 
}

function jot { 
bash /Users/$USER/Documents/code/jot/jot.sh "$*" 
}
function sticky {
  MAP="/Users/samschlinkert/Documents/code/sticky/path.txt"

  STICKY_ROUTE=$(<$MAP)

  if [[ $1 == here ]]
  then 
    NEW_PATH=$(pwd)
    echo "$NEW_PATH/" > $MAP 
    echo "Now placing sticky notes in "$NEW_PATH
  elif [[ $1 == where ]]
  then
    echo "You're sticking notes in "$STICKY_ROUTE

    echo "Do you want to go there? (y/n) "
    read -p "" -n 1 -r  
    echo ''   # move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]] 
    then
      cd $STICKY_ROUTE
    fi
  elif [[ $1 == help ]]
  then
      echo "sticky here to change where you'll stick notes"
      echo "sticky where to ask where you're currently sticking notes"
      echo "sticky all to open all your notes in your text editor"
      echo "sticky <file name, no extension> to stick a new note"
  elif [[ $1 == all ]]
  then 
    nvim $STICKY_ROUTE
  else
    #INPUT=$1
    INPUT=$*
    NOTE_TITLE=${INPUT// /-}      # replace all spaces with hyphens
    touch $STICKY_ROUTE"$NOTE_TITLE".mdown 
    nvim $STICKY_ROUTE"$NOTE_TITLE".mdown
  fi
}

function frontend {
  cwd=$(pwd)
  echo "Creating new directory with frontend template..."
  cp -r ~/Documents/code/frontend_template ./$1
  cd ./$1
  echo "Initializing git and making initial commit..."
  git init
  git add .
  git commit -m "initial commit"
}

#function url_to_html {
  #ruby /Users/samschlinkert/Documents/code/em/url_to_article.rb "$1"
#}

function ss {
  tmux new-session -d -s sync
  tmux send-keys -t sync "syncthing -no-browser" Enter
}

function em {
  cwd=$(pwd) #save pwd as cwd
  cd /Users/samschlinkert/Documents/code/em/
  ruby /Users/samschlinkert/Documents/code/em/command_line_tool.rb "$1" $cwd
}

function octo_new {
  bash /Users/$USER/Documents/code/octo_new/octo_new.sh "$1" # $(pwd) $3
}

# A function to easily grep for a matching process
# USE: psg postgres
function psg {
  FIRST=`echo $1 | sed -e 's/^\(.\).*/\1/'`
  REST=`echo $1 | sed -e 's/^.\(.*\)/\1/'`
  ps aux | grep "[$FIRST]$REST"
}

# A function to extract correctly any archive based on extension
# USE: extract imazip.zip
#      extract imatar.tar
function extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)  tar xjf $1      ;;
            *.tar.gz)   tar xzf $1      ;;
            *.bz2)      bunzip2 $1      ;;
            *.rar)      rar x $1        ;;
            *.gz)       gunzip $1       ;;
            *.tar)      tar xf $1       ;;
            *.tbz2)     tar xjf $1      ;;
            *.tgz)      tar xzf $1      ;;
            *.zip)      unzip $1        ;;
            *.Z)        uncompress $1   ;;
            *)          echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# Aliases
# =====================

  alias tnc="ssh schlink@totallynuclear.club"

  # LS
  alias l='ls -lah'

  # Git
  alias gst="git status"
  alias gl="git pull"
  alias gp="git push"
  alias gpom="git push origin master"
  alias gd="git diff | mate"
  #alias gc="git commit -v"
  alias gca="git commit -v -a"
  alias gb="git branch"
  alias gba="git branch -a"

  function gitAddAndCommit {
      git add -A
      git commit -m "$1"
  }
  alias gc=gitAddAndCommit

  # alias emacs="/usr/local/Cellar/emacs/24.3/Emacs.app/Contents/MacOS/Emacs -nw"
  alias gvim="/Applications/MacVim.app/Contents/MacOS/Vim"
  #alias vim="/usr/local/Cellar/vim/7.4.488/bin/vim"
  
  alias rr="ruby runner.rb"
  alias rbr="ruby bin/runner.rb"

  alias rem="mvim ~/Documents/journals/remnants.mdown"
  
# Final Configurations and Plugins
# =====================
  # Git Bash Completion
  # Will activate bash git completion if installed
  # via homebrew

  if [ -f `brew --prefix`/etc/bash_completion.d/git-completion.bash ]; then
      . `brew --prefix`/etc/bash_completion.d/git-completion.bash
  fi
# if you're using OS X versions EARLIER THAN Yosemite (10.10.5), use this:
# if [ -f `brew --prefix`/etc/bash_completion ]; then
#   . `brew --prefix`/etc/bash_completion
# fi

if [ -f ~/.bashrc ]; then
   source ~/.bashrc
fi
# Config for FZF (https://github.com/junegunn/fzf)
# [ -f ~/.fzf.bash ] && source ~/.fzf.bash

  # RVM
  # Mandatory loading of RVM into the shell
  # This must be the last line of your bash_profile always

# Setting PATH for Python 3.5
# The orginal version is saved in .bash_profile.pysave
PATH="/Library/Frameworks/Python.framework/Versions/3.5/bin:${PATH}"
export PATH

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
